//===- CodeGeneration.cpp - Code generate the Scops using ISL. ---------======//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
//
//===----------------------------------------------------------------------===//

#include "polly/Test/ScheduleOptimizer.h"
#include "polly/Test/OpenSCoPExporter.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include <cstdio>
#include <fstream>
#include <osl/scop.h>

using namespace llvm;
using namespace polly;

namespace {

std::string exec(const char *Command) {
  std::array<char, 512> Buffer;
  std::string Result;

  std::unique_ptr<FILE, decltype(&pclose)> Pipe(popen(Command, "r"), pclose);

  if (!Pipe) {
    errs() << "popen() failed!\n";
    return "";
  }

  while (fgets(Buffer.data(), Buffer.size(), Pipe.get()) != nullptr) {
    Result += Buffer.data();
  }

  return Result;
}

std::string extractOpenScopFromString(std::string &Input) {
  size_t Start = Input.find("# [File generated by the OpenScop Library");
  size_t End = Input.find("</OpenScop>");
  End += std::string("</OpenScop>").size();

  return Input.substr(Start, End - Start);
}

void saveToFile(const std::string &Filename, const std::string &Content) {
  std::ofstream Outfile(Filename);
  if (!Outfile)
    llvm_unreachable("Erreur d'ouverture du fichier");
  Outfile << Content;
  Outfile.close();
}
} // namespace

PreservedAnalyses
PlutoScheduleOptimizerPass::run(Scop &S, ScopAnalysisManager &SAM,
                                ScopStandardAnalysisResults &SAR,
                                SPMUpdater &U) {
  errs() << "PlutoScheduleOptimizerPass run on " << S.getName() << "\n";

  osl_scop_p OSLScop =
      OpenSCoPExportPass::exportOpenScop(S, "pluto_input.scop");
  osl_scop_free(OSLScop);

  errs() << "Calling pluto on the file pluto.scop\n";

  std::system("docker cp pluto_input.scop pluto_container:/home/");
  auto ResultPluto = exec(
      "docker exec pluto_container sh -c \"cat /home/pluto_input.scop | pluto "
      "--readscop stdin -o stdout\"");

  errs() << "Result of pluto:\n" << ResultPluto << "\n";

  std::string NewScopExtracted = extractOpenScopFromString(ResultPluto);

  saveToFile("pluto_output.scop", NewScopExtracted);

  OpenSCoPImportPass::importOpenScop(S, OSLScop, "pluto_output.scop");

  return PreservedAnalyses::all();
}
